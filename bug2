eduling

Description:
Currently, several production Databricks jobs are configured using the Simple Schedule format. This has caused issues with regex-based parsing for documentation and automation workflows, particularly on the Confluence job detail page where these jobs fail to display proper schedule information.

To resolve the issue and align with long-term scheduling best practices, all production jobs must be updated to use Advanced Scheduling in Databricks. Advanced Scheduling provides better control, supports Quartz Cron syntax, and allows explicit time zone configurationâ€”making it the appropriate choice for production workloads that require predictable, timezone-aware execution.

Background:

Databricks supports two scheduling types:

Simple Schedule: Interval-based (e.g., every 12 hours), lacks time zone control and cron syntax.

Advanced Schedule: Supports cron expressions, precise run times, multiple time slots per day, and explicit time zones (e.g., UTC), ideal for critical production jobs.

Value Add:

Ensures consistent and reliable job scheduling across environments

Enables successful parsing and visibility in downstream systems (e.g., Confluence documentation and dashboards)

Reduces ambiguity caused by Daylight Saving Time and other time-based edge cases

Aligns all production job configurations with long-term DevOps standards

Acceptance Criteria:

Audit and identify all current production jobs using Simple Schedule

Update job configurations to use Advanced Schedule with equivalent or improved timing

Use cron syntax to match or enhance existing execution intervals

Set all jobs to a standardized time zone (e.g., UTC) for consistency

Validate that all updated jobs appear correctly on the auto-generated Confluence job documentation page
